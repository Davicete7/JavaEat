package InterfazJavaEat;


//IMPORTES
import ClasesJavaEat.Cliente;
import ClasesJavaEat.Comida;
import ClasesJavaEat.Empresa;
import ClasesJavaEat.Restaurante;
import ClasesJavaEat.Sistema;
import java.awt.Color;
import java.io.Serializable;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;




/**
 * -Clase en la que una {@link Empresa} decide a que {@link Restaurante} quiere pedir {@link Comida}.
 * @author David Sanchez
 * @version 1.0
 * @since 23/05/2023
 * @see Cliente
 * @see Comida
 * @see Empresa
 * @see Restaurante
 * @see Sistema
 * @see Color
 * @see Serializable
 * @see ArrayList
 * @see DefaultListModel
 * @see ImageIcon
 * @see JOptionPane
 */
public class ServicioNormal extends javax.swing.JFrame implements Serializable{


    ArrayList<Restaurante> restaurantesValidos = new ArrayList<>();    
    int xMouse,yMouse;
    DefaultListModel modeloRestaurantes = new DefaultListModel();           //Creamos un modelo para restaurantesLista(JList)

    
    public ServicioNormal() {
        
        initComponents();
        this.setLocationRelativeTo(null);
        
        //Actualizamos los datos como siempre
        Sistema.cargarDatosClientes();
        Sistema.cargarDatosEmpresas();
        Sistema.cargarDatosRestaurantes();
        Sistema.cargarDatosComidas();
        Sistema.cargarDatosVentasClientes();
        Sistema.cargarDatosVentasEmpresas();
        Sistema.cargarDatosVentasCatering();
        
        //Le damos un modelo a restaurantesLista(JList)
        restaurantesLista.setModel(modeloRestaurantes);
        
        //Quitamos todos los datos que haya en las dos listas (Para poner los actalizados)
        modeloRestaurantes.removeAllElements();
        
        
        //Añadimos ahora todos los restaurantes
        

        //Obtenemos los 4 primero numeros del codigoPostal del cliente
        Empresa empresaActual = Sistema.getEmpresaActual();
        String clCP = empresaActual.getDireccion().getCodigoPostal();
        clCP = clCP.substring(0, 4);
        for (Restaurante r : Sistema.getListaRestaurantes()) 
        {
            //Filtramos los restaurantes validos para el codigo postal con sus 4 primeros numeros
            String resCP = r.getDireccion().getCodigoPostal();
            resCP = resCP.substring(0, 4);
            
            //Filtramos que restaurantes son validos y cuales no
            if(resCP.equals(clCP))
            {
                restaurantesValidos.add(r);
            }
            
            
        }
        for (Restaurante restaurante : restaurantesValidos)
            {
                String nombre = restaurante.getNombre();
                String especialidad = restaurante.getEspecialidad();
                String calificacion = restaurante.getCalificacion();
                String tiempoEnvio = restaurante.getMinTiempoEnvio();

                String txt = nombre+", con especialidad en "+especialidad
                        +".   Calificacion: "+calificacion+" puntos.   Tiempo envio: "+tiempoEnvio+" min.";

                modeloRestaurantes.addElement(txt);
            }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        FondoVerdeDerecha = new javax.swing.JPanel();
        eatsTexto = new javax.swing.JLabel();
        cerrarSesionTexto = new javax.swing.JLabel();
        javaTexto = new javax.swing.JLabel();
        atrasBoton = new javax.swing.JButton();
        pedirComidaBoton = new javax.swing.JButton();
        BarraFunciones = new javax.swing.JPanel();
        botonExit = new javax.swing.JPanel();
        exitTexto = new javax.swing.JLabel();
        pedirComidaTexto = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        restaurantesLista = new javax.swing.JList<>();
        restaurantesTexto = new javax.swing.JLabel();
        flitrosTexto = new javax.swing.JLabel();
        especialiadadTexto = new javax.swing.JLabel();
        especialidadInfo = new javax.swing.JTextField();
        aplicarEspecialidadFiltro = new javax.swing.JButton();
        relevanciatexto = new javax.swing.JLabel();
        aplicarRelevanciaFiltro = new javax.swing.JButton();
        infoExtra2 = new javax.swing.JLabel();
        tiempoEnviotexto = new javax.swing.JLabel();
        timepoEnvioInfo = new javax.swing.JTextField();
        aplicarTiempoEnvioFIltro = new javax.swing.JButton();
        infoExtra1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);
        setResizable(false);

        background.setBackground(new java.awt.Color(255, 255, 255));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        FondoVerdeDerecha.setBackground(new java.awt.Color(6, 193, 103));

        eatsTexto.setFont(new java.awt.Font("Roboto Black", 0, 48)); // NOI18N
        eatsTexto.setForeground(new java.awt.Color(0, 0, 0));
        eatsTexto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eatsTexto.setText("EATS");

        cerrarSesionTexto.setBackground(new java.awt.Color(255, 255, 255));
        cerrarSesionTexto.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        cerrarSesionTexto.setForeground(new java.awt.Color(0, 0, 0));
        cerrarSesionTexto.setText("Cerrar Sesión");
        cerrarSesionTexto.setBorder(null);
        cerrarSesionTexto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cerrarSesionTexto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cerrarSesionTextoMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cerrarSesionTextoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cerrarSesionTextoMouseExited(evt);
            }
        });

        javaTexto.setFont(new java.awt.Font("Roboto Black", 0, 36)); // NOI18N
        javaTexto.setForeground(new java.awt.Color(0, 0, 0));
        javaTexto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        javaTexto.setText("JAVA");

        atrasBoton.setBackground(new java.awt.Color(6, 193, 103));
        atrasBoton.setFont(new java.awt.Font("Roboto Black", 2, 18)); // NOI18N
        atrasBoton.setForeground(new java.awt.Color(0, 0, 0));
        atrasBoton.setBorder(null);
        atrasBoton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        atrasBoton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                atrasBotonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                atrasBotonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                atrasBotonMouseExited(evt);
            }
        });
        atrasBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atrasBotonActionPerformed(evt);
            }
        });

        pedirComidaBoton.setBackground(new java.awt.Color(6, 193, 103));
        pedirComidaBoton.setFont(new java.awt.Font("Roboto Black", 2, 18)); // NOI18N
        pedirComidaBoton.setForeground(new java.awt.Color(0, 0, 0));
        pedirComidaBoton.setText("Pedir Comida");
        pedirComidaBoton.setBorder(null);
        pedirComidaBoton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pedirComidaBoton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                pedirComidaBotonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                pedirComidaBotonMouseExited(evt);
            }
        });
        pedirComidaBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pedirComidaBotonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FondoVerdeDerechaLayout = new javax.swing.GroupLayout(FondoVerdeDerecha);
        FondoVerdeDerecha.setLayout(FondoVerdeDerechaLayout);
        FondoVerdeDerechaLayout.setHorizontalGroup(
            FondoVerdeDerechaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(eatsTexto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FondoVerdeDerechaLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(atrasBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FondoVerdeDerechaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(FondoVerdeDerechaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FondoVerdeDerechaLayout.createSequentialGroup()
                        .addGroup(FondoVerdeDerechaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cerrarSesionTexto, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(javaTexto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FondoVerdeDerechaLayout.createSequentialGroup()
                        .addComponent(pedirComidaBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))))
        );
        FondoVerdeDerechaLayout.setVerticalGroup(
            FondoVerdeDerechaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FondoVerdeDerechaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cerrarSesionTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(105, 105, 105)
                .addComponent(javaTexto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eatsTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                .addComponent(pedirComidaBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(atrasBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        atrasBoton.setIcon(new ImageIcon("Imagenes/logoAtras.png"));

        background.add(FondoVerdeDerecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 0, 280, 550));

        BarraFunciones.setBackground(new java.awt.Color(255, 255, 255));
        BarraFunciones.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                BarraFuncionesMouseDragged(evt);
            }
        });
        BarraFunciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BarraFuncionesMousePressed(evt);
            }
        });

        botonExit.setBackground(new java.awt.Color(255, 255, 255));

        exitTexto.setBackground(new java.awt.Color(255, 255, 255));
        exitTexto.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        exitTexto.setForeground(new java.awt.Color(0, 0, 0));
        exitTexto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitTexto.setText("X");
        exitTexto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitTexto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitTextoMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exitTextoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exitTextoMouseExited(evt);
            }
        });

        javax.swing.GroupLayout botonExitLayout = new javax.swing.GroupLayout(botonExit);
        botonExit.setLayout(botonExitLayout);
        botonExitLayout.setHorizontalGroup(
            botonExitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, botonExitLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(exitTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        botonExitLayout.setVerticalGroup(
            botonExitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(exitTexto, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout BarraFuncionesLayout = new javax.swing.GroupLayout(BarraFunciones);
        BarraFunciones.setLayout(BarraFuncionesLayout);
        BarraFuncionesLayout.setHorizontalGroup(
            BarraFuncionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BarraFuncionesLayout.createSequentialGroup()
                .addComponent(botonExit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 859, Short.MAX_VALUE))
        );
        BarraFuncionesLayout.setVerticalGroup(
            BarraFuncionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BarraFuncionesLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(botonExit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        background.add(BarraFunciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 40));

        pedirComidaTexto.setFont(new java.awt.Font("Roboto Black", 0, 36)); // NOI18N
        pedirComidaTexto.setForeground(new java.awt.Color(0, 0, 0));
        pedirComidaTexto.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        pedirComidaTexto.setText("Pedir comida");
        background.add(pedirComidaTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 260, -1));
        background.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 400, 20));

        restaurantesLista.setBackground(new java.awt.Color(6, 193, 103));
        restaurantesLista.setFont(new java.awt.Font("Roboto Medium", 2, 12)); // NOI18N
        restaurantesLista.setForeground(new java.awt.Color(0, 0, 0));
        restaurantesLista.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        restaurantesLista.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane1.setViewportView(restaurantesLista);

        background.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 620, -1));

        restaurantesTexto.setFont(new java.awt.Font("Roboto Black", 0, 24)); // NOI18N
        restaurantesTexto.setForeground(new java.awt.Color(0, 0, 0));
        restaurantesTexto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        restaurantesTexto.setText("Restaurantes disponibles");
        background.add(restaurantesTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 620, -1));

        flitrosTexto.setFont(new java.awt.Font("Roboto Black", 0, 24)); // NOI18N
        flitrosTexto.setForeground(new java.awt.Color(0, 0, 0));
        flitrosTexto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        flitrosTexto.setText("Flitros");
        background.add(flitrosTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 400, -1));

        especialiadadTexto.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        especialiadadTexto.setForeground(new java.awt.Color(0, 0, 0));
        especialiadadTexto.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        especialiadadTexto.setText("Especialidad");
        background.add(especialiadadTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 110, -1));

        especialidadInfo.setBackground(new java.awt.Color(255, 255, 255));
        especialidadInfo.setForeground(new java.awt.Color(0, 0, 0));
        especialidadInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        especialidadInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                especialidadInfoActionPerformed(evt);
            }
        });
        background.add(especialidadInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 140, 260, 40));

        aplicarEspecialidadFiltro.setBackground(new java.awt.Color(6, 193, 103));
        aplicarEspecialidadFiltro.setFont(new java.awt.Font("Roboto Black", 2, 18)); // NOI18N
        aplicarEspecialidadFiltro.setForeground(new java.awt.Color(0, 0, 0));
        aplicarEspecialidadFiltro.setText("Aplicar");
        aplicarEspecialidadFiltro.setBorder(null);
        aplicarEspecialidadFiltro.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        aplicarEspecialidadFiltro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                aplicarEspecialidadFiltroMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                aplicarEspecialidadFiltroMouseExited(evt);
            }
        });
        aplicarEspecialidadFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplicarEspecialidadFiltroActionPerformed(evt);
            }
        });
        background.add(aplicarEspecialidadFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 140, 90, 40));

        relevanciatexto.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        relevanciatexto.setForeground(new java.awt.Color(0, 0, 0));
        relevanciatexto.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        relevanciatexto.setText("Relevancia");
        background.add(relevanciatexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, 90, -1));

        aplicarRelevanciaFiltro.setBackground(new java.awt.Color(6, 193, 103));
        aplicarRelevanciaFiltro.setFont(new java.awt.Font("Roboto Black", 2, 18)); // NOI18N
        aplicarRelevanciaFiltro.setForeground(new java.awt.Color(0, 0, 0));
        aplicarRelevanciaFiltro.setText("Aplicar");
        aplicarRelevanciaFiltro.setBorder(null);
        aplicarRelevanciaFiltro.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        aplicarRelevanciaFiltro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                aplicarRelevanciaFiltroMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                aplicarRelevanciaFiltroMouseExited(evt);
            }
        });
        aplicarRelevanciaFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplicarRelevanciaFiltroActionPerformed(evt);
            }
        });
        background.add(aplicarRelevanciaFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 190, 90, 40));

        infoExtra2.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        infoExtra2.setForeground(new java.awt.Color(0, 0, 0));
        infoExtra2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        infoExtra2.setText("(Ponga el tiempo en minutos)");
        background.add(infoExtra2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 290, 200, -1));

        tiempoEnviotexto.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        tiempoEnviotexto.setForeground(new java.awt.Color(0, 0, 0));
        tiempoEnviotexto.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        tiempoEnviotexto.setText("Tiempo Envio");
        background.add(tiempoEnviotexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 120, -1));

        timepoEnvioInfo.setBackground(new java.awt.Color(255, 255, 255));
        timepoEnvioInfo.setForeground(new java.awt.Color(0, 0, 0));
        timepoEnvioInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        timepoEnvioInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timepoEnvioInfoActionPerformed(evt);
            }
        });
        background.add(timepoEnvioInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 250, 260, 40));

        aplicarTiempoEnvioFIltro.setBackground(new java.awt.Color(6, 193, 103));
        aplicarTiempoEnvioFIltro.setFont(new java.awt.Font("Roboto Black", 2, 18)); // NOI18N
        aplicarTiempoEnvioFIltro.setForeground(new java.awt.Color(0, 0, 0));
        aplicarTiempoEnvioFIltro.setText("Aplicar");
        aplicarTiempoEnvioFIltro.setBorder(null);
        aplicarTiempoEnvioFIltro.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        aplicarTiempoEnvioFIltro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                aplicarTiempoEnvioFIltroMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                aplicarTiempoEnvioFIltroMouseExited(evt);
            }
        });
        aplicarTiempoEnvioFIltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplicarTiempoEnvioFIltroActionPerformed(evt);
            }
        });
        background.add(aplicarTiempoEnvioFIltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 250, 90, 40));

        infoExtra1.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        infoExtra1.setForeground(new java.awt.Color(0, 0, 0));
        infoExtra1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        infoExtra1.setText("(Mostrara los restaurantes con 3 puntos o mas)");
        background.add(infoExtra1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 200, 310, -1));
        background.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 330, 640, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BarraFuncionesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BarraFuncionesMousePressed
        // TODO add your handling code here:
        xMouse = evt.getX();
        yMouse = evt.getY();
        
    }//GEN-LAST:event_BarraFuncionesMousePressed

    private void BarraFuncionesMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BarraFuncionesMouseDragged
        // TODO add your handling code here:
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        
        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_BarraFuncionesMouseDragged

    private void exitTextoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTextoMouseClicked
        // TODO add your handling code here:
        System.exit(0);
        
    }//GEN-LAST:event_exitTextoMouseClicked

    private void exitTextoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTextoMouseEntered
        // TODO add your handling code here:
        botonExit.setBackground(Color.red);
        exitTexto.setForeground(Color.WHITE);
    }//GEN-LAST:event_exitTextoMouseEntered

    private void exitTextoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTextoMouseExited
        // TODO add your handling code here:
        botonExit.setBackground(Color.WHITE);
        exitTexto.setForeground(Color.BLACK);
    }//GEN-LAST:event_exitTextoMouseExited

    private void cerrarSesionTextoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cerrarSesionTextoMouseClicked
        // TODO add your handling code here:

        //Le advertimos de lo que va a hacer
        int respuestaUsuario = JOptionPane.showConfirmDialog(this, "¿Seguro que desea cerrar sesion?", "CERRAR SESIÓN"
            ,JOptionPane.YES_NO_OPTION );
        if(respuestaUsuario == JOptionPane.YES_OPTION)
        {
            //Le llevamos a la ventana de Inicio de sesion.
            InicioSesion cerrarSesion = new InicioSesion();
            cerrarSesion.setVisible(true);
            this.setVisible(false);
        }
    }//GEN-LAST:event_cerrarSesionTextoMouseClicked

    private void cerrarSesionTextoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cerrarSesionTextoMouseEntered
        // TODO add your handling code here:
        cerrarSesionTexto.setForeground(Color.RED);
    }//GEN-LAST:event_cerrarSesionTextoMouseEntered

    private void cerrarSesionTextoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cerrarSesionTextoMouseExited
        // TODO add your handling code here:
        cerrarSesionTexto.setForeground(Color.BLACK);
    }//GEN-LAST:event_cerrarSesionTextoMouseExited

    private void pedirComidaBotonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pedirComidaBotonMouseEntered
        // TODO add your handling code here:
        pedirComidaBoton.setForeground(Color.BLUE);
    }//GEN-LAST:event_pedirComidaBotonMouseEntered

    private void pedirComidaBotonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pedirComidaBotonMouseExited
        // TODO add your handling code here:
        pedirComidaBoton.setForeground(Color.BLACK);
    }//GEN-LAST:event_pedirComidaBotonMouseExited

    private void pedirComidaBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pedirComidaBotonActionPerformed
        // TODO add your handling code here:
        if(!restaurantesLista.isSelectionEmpty())
        {
            
                String restauranteNombre = restaurantesLista.getSelectedValue();
                String[] aux = restauranteNombre.split(",");             //Solo me interesa el primer elemento que sera el nombre
                restauranteNombre = aux[0];

                //Busco la comida que se quiere eliminar
                int index = -1;
                for (Restaurante res : Sistema.getListaRestaurantes()) 
                {
                    index++;
                    if(res.getNombre().equals(restauranteNombre))
                    {
                        Sistema.setRestauranteActual(res);
                        break; //Para que no siga recorriendo la lista
                    }
                }

                //Actualizo la pagina
                ComprarComidaEmpresas reinicio = new ComprarComidaEmpresas();
                reinicio.setVisible(true);
                this.setVisible(false);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Seleccione un restaurante", "NO HAY NINGUN RESTAURANTE SELECCIONADO", JOptionPane.INFORMATION_MESSAGE);
        }
        

        
        
    }//GEN-LAST:event_pedirComidaBotonActionPerformed

    private void aplicarEspecialidadFiltroMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aplicarEspecialidadFiltroMouseEntered
        // TODO add your handling code here:
        aplicarEspecialidadFiltro.setForeground(Color.BLUE);
    }//GEN-LAST:event_aplicarEspecialidadFiltroMouseEntered

    private void aplicarEspecialidadFiltroMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aplicarEspecialidadFiltroMouseExited
        // TODO add your handling code here:
        aplicarEspecialidadFiltro.setForeground(Color.BLACK);
    }//GEN-LAST:event_aplicarEspecialidadFiltroMouseExited

    private void aplicarEspecialidadFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplicarEspecialidadFiltroActionPerformed
        // TODO add your handling code here:
        
        //Obtengo lo que quiero buscar
        String buscado = especialidadInfo.getText();
        
        //Creo un array auxiliar
        ArrayList<Restaurante> resAUX = new ArrayList<>();
        
        //Busco y creo la lista que cumpla los filtros
        if(!Sistema.esStringCorrecto(buscado))
            {
                //Borro lo que hubiese
                modeloRestaurantes.clear();
                
                //Y ahora restablezco la lista
                for (Restaurante restaurante : restaurantesValidos)
                    {
                        String nombre = restaurante.getNombre();
                        String especialidad = restaurante.getEspecialidad();
                        String calificacion = restaurante.getCalificacion();
                        String tiempoEnvio = restaurante.getMinTiempoEnvio();

                        String txt = nombre+", con especialidad en "+especialidad
                                +".   Calificacion: "+calificacion+" puntos.   Tiempo envio: "+tiempoEnvio+" min.";

                        modeloRestaurantes.addElement(txt);
                    }   
            }
        else
            {
                
                //Borro lo que hubiese
                modeloRestaurantes.clear();
                
                
               
                
                //Aplico el filtro

                for(Restaurante res : Sistema.getListaRestaurantes())
                {
                    if(res.getEspecialidad().equals(buscado) && restaurantesValidos.contains(res))
                    {
                        resAUX.add(res);
                    }
                }

                
                

                //Muestro al usuario la lista con los filtros
                for (Restaurante restaurante : resAUX)
                    {
                        String nombre = restaurante.getNombre();
                        String especialidad = restaurante.getEspecialidad();
                        String calificacion = restaurante.getCalificacion();
                        String tiempoEnvio = restaurante.getMinTiempoEnvio();

                        String txt = nombre+", con especialidad en "+especialidad
                                +".   Calificacion: "+calificacion+" puntos.   Tiempo envio: "+tiempoEnvio+" min.";

                        modeloRestaurantes.addElement(txt);
                    }
                
                //Vacio el campo de texto
                especialidadInfo.setText("");
                
                

                
            
            }        
    }//GEN-LAST:event_aplicarEspecialidadFiltroActionPerformed

    private void atrasBotonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_atrasBotonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_atrasBotonMouseClicked

    private void atrasBotonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_atrasBotonMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_atrasBotonMouseEntered

    private void atrasBotonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_atrasBotonMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_atrasBotonMouseExited

    private void atrasBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atrasBotonActionPerformed
        // TODO add your handling code here:
        SeleccionPedir ventanaInicioCliente = new SeleccionPedir();
        ventanaInicioCliente.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_atrasBotonActionPerformed

    private void especialidadInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_especialidadInfoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_especialidadInfoActionPerformed

    private void aplicarRelevanciaFiltroMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aplicarRelevanciaFiltroMouseEntered
        // TODO add your handling code here:
        aplicarRelevanciaFiltro.setForeground(Color.blue);
        
    }//GEN-LAST:event_aplicarRelevanciaFiltroMouseEntered

    private void aplicarRelevanciaFiltroMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aplicarRelevanciaFiltroMouseExited
        // TODO add your handling code here:
        aplicarRelevanciaFiltro.setForeground(Color.black);
    }//GEN-LAST:event_aplicarRelevanciaFiltroMouseExited

    private void aplicarRelevanciaFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplicarRelevanciaFiltroActionPerformed
        // TODO add your handling code here:
        

        //Creo un array auxiliar
        ArrayList<Restaurante> resAUX = new ArrayList<>();
        
        //Busco y creo la lista que cumpla los filtros

        //Borro lo que hubiese
        modeloRestaurantes.clear();
                
                
               
                
        //Aplico el filtro

        for(Restaurante res : Sistema.getListaRestaurantes())
            {
                if(Double.parseDouble(res.getCalificacion()) >= 3 && restaurantesValidos.contains(res))
                {
                    resAUX.add(res);
                }
            }

                
                

        //Muestro al usuario la lista con los filtros
        for (Restaurante restaurante : resAUX)
            {
                String nombre = restaurante.getNombre();
                String especialidad = restaurante.getEspecialidad();
                String calificacion = restaurante.getCalificacion();
                String tiempoEnvio = restaurante.getMinTiempoEnvio();

                String txt = nombre+", con especialidad en "+especialidad
                                +".   Calificacion: "+calificacion+" puntos.   Tiempo envio: "+tiempoEnvio+" min.";

                modeloRestaurantes.addElement(txt);
            }
    }//GEN-LAST:event_aplicarRelevanciaFiltroActionPerformed

    private void timepoEnvioInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timepoEnvioInfoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timepoEnvioInfoActionPerformed

    private void aplicarTiempoEnvioFIltroMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aplicarTiempoEnvioFIltroMouseEntered
        // TODO add your handling code here:
        aplicarTiempoEnvioFIltro.setForeground(Color.BLUE);
    }//GEN-LAST:event_aplicarTiempoEnvioFIltroMouseEntered

    private void aplicarTiempoEnvioFIltroMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aplicarTiempoEnvioFIltroMouseExited
        // TODO add your handling code here:
        aplicarTiempoEnvioFIltro.setForeground(Color.BLACK);
    }//GEN-LAST:event_aplicarTiempoEnvioFIltroMouseExited

    private void aplicarTiempoEnvioFIltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplicarTiempoEnvioFIltroActionPerformed
        // TODO add your handling code here:
        
        
        //Obtengo lo que quiero buscar
        String buscado = timepoEnvioInfo.getText();
        
        //Creo un array auxiliar
        ArrayList<Restaurante> resAUX = new ArrayList<>();
        
        //Busco y creo la lista que cumpla los filtros
        if(!Sistema.esStringCorrecto(buscado))
            {
                //Borro lo que hubiese
                modeloRestaurantes.clear();
                
                //Y ahora restablezco la lista
                for (Restaurante restaurante : restaurantesValidos)
                    {
                        String nombre = restaurante.getNombre();
                        String especialidad = restaurante.getEspecialidad();
                        String calificacion = restaurante.getCalificacion();
                        String tiempoEnvio = restaurante.getMinTiempoEnvio();

                        String txt = nombre+", con especialidad en "+especialidad
                                +".   Calificacion: "+calificacion+" puntos.   Tiempo envio: "+tiempoEnvio+" min.";

                        modeloRestaurantes.addElement(txt);
                    }   
            }
        else
            {
                
                //Borro lo que hubiese
                modeloRestaurantes.clear();
                
                //Aplico el filtro

                for(Restaurante res : Sistema.getListaRestaurantes())
                {
                    if(res.getMinTiempoEnvio().equals(buscado) && restaurantesValidos.contains(res))
                    {
                        resAUX.add(res);
                    }
                }

                
                

                //Muestro al usuario la lista con los filtros
                for (Restaurante restaurante : resAUX)
                    {
                        String nombre = restaurante.getNombre();
                        String especialidad = restaurante.getEspecialidad();
                        String calificacion = restaurante.getCalificacion();
                        String tiempoEnvio = restaurante.getMinTiempoEnvio();

                        String txt = nombre+", con especialidad en "+especialidad
                                +".   Calificacion: "+calificacion+" puntos.   Tiempo envio: "+tiempoEnvio+" min.";

                        modeloRestaurantes.addElement(txt);
                    }
                
                

                //Vacio el campo de texto
                timepoEnvioInfo.setText("");
            
            }  
    }//GEN-LAST:event_aplicarTiempoEnvioFIltroActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServicioNormal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServicioNormal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServicioNormal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServicioNormal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServicioNormal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BarraFunciones;
    private javax.swing.JPanel FondoVerdeDerecha;
    private javax.swing.JButton aplicarEspecialidadFiltro;
    private javax.swing.JButton aplicarRelevanciaFiltro;
    private javax.swing.JButton aplicarTiempoEnvioFIltro;
    private javax.swing.JButton atrasBoton;
    private javax.swing.JPanel background;
    private javax.swing.JPanel botonExit;
    private javax.swing.JLabel cerrarSesionTexto;
    private javax.swing.JLabel eatsTexto;
    private javax.swing.JLabel especialiadadTexto;
    private javax.swing.JTextField especialidadInfo;
    private javax.swing.JLabel exitTexto;
    private javax.swing.JLabel flitrosTexto;
    private javax.swing.JLabel infoExtra1;
    private javax.swing.JLabel infoExtra2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel javaTexto;
    private javax.swing.JButton pedirComidaBoton;
    private javax.swing.JLabel pedirComidaTexto;
    private javax.swing.JLabel relevanciatexto;
    private javax.swing.JList<String> restaurantesLista;
    private javax.swing.JLabel restaurantesTexto;
    private javax.swing.JLabel tiempoEnviotexto;
    private javax.swing.JTextField timepoEnvioInfo;
    // End of variables declaration//GEN-END:variables
}
